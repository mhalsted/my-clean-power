Net.Gen = raw_plant_data$Net.Generation..Megawatthours.,
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
View(plant_data_cleaned)
plant_data_cleaned$Net.Gen(which(plant_data_cleaned$Plant.State=="TN"))
plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")]
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")])
plant_data_cleaned <- data_frame(
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
Plant.State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(raw_plant_data$Net.Generation..Megawatthours.),
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
plant_data_cleaned <- data_frame(
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
Plant.State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(gsub(",", "", raw_plant_data$Net.Generation..Megawatthours.)),
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")])
raw_plant_geo_data <- read.csv("data/plantgeodata.csv", stringsAsFactors = FALSE)
plant_data_cleaned <- data_frame( #renamed variable =  #named variable from spreadsheet
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(gsub(",", "", raw_plant_data$Net.Generation..Megawatthours.)), #fix commas in numerical data issue http://stackoverflow.com/a/1523177
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
## Examples:
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$State=="TN")]) #sum of net gen from all plants in TN
plant_geo_data_cleaned <- data_frame(
Plant.Id = raw_plant_geo_data$ORIS.Code,
Plant.Name = raw_plant_geo_data$Name,
FuelType = raw_plant_geo_data$Fuel,
FuelType.Simplified = raw_plant_geo_data$FuelSimplified,
State = raw_plant_geo_data$State,
Lat = raw_plant_geo_data$Lat,
Lon = raw_plant_geo_data$Lon
)
View(plant_data_cleaned)
combined_plant_geo_data <- data_frame(
Plant.Id = plant_data_cleaned$Plant.Id,
Plant.Name = plant_data_cleaned$Plant.Name,
State = plant_data_cleaned$State,
Net.Gen = plant_data_cleaned$Net.Gen, #fix commas in numerical data issue http://stackoverflow.com/a/1523177
Physical_Unit = plant_data_cleaned$Physical_Unit,
Total_Fuel_Consumption = plant_data_cleaned$Total_Fuel_Consumption,
FuelType = NA,
Lat = NA,
Lon = NA
)
combined_plant_geo_data$Lat <- plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id = combined_plant_geo_data$Plant.Id)]
combined_plant_geo_data$Lat <- plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id)]
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id[i] == combined_plant_geo_data$Plant.Id[i])]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
View(combined_plant_geo_data)
View(plant_geo_data_cleaned)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
print(i)
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
print(paste(i, length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])])))
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
print(paste(i, length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])])))
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
}
warnings()
View(combined_plant_geo_data)
summary(plant_geo_data_cleaned$Plant.Id)
which(1:4 > 5)
which(1:4 > 2)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
}
factor(plant_geo_data_cleaned$Plant.Id)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
}
}
which(plant_geo_data_cleaned$Plant.Id == 2727)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA, # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1],
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
? NA
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = '', # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = ''
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1],
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
combined_plant_geo_data$Lon <- as.numeric(combined_plant_geo_data$Lon)
library(checkpoint)
checkpoint::checkpoint("2016-11-15")
install.packages("shiny")
shiny::runApp('shiny/my-clean-power-app')
install.packages("leaflet")
install.packages("maps")
library(maps)
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
stateNameCSV = read.csv("data/StateNames.csv",
header = TRUE)
### convert generation data to vectors with charcters for manipulation
statenames = as.character(stateNameCSV$State)
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
### Plant Location Data
geodata <- read.csv("data/plantgeodata.csv")
runApp('shiny/my-clean-power-app')
library(leaflet)
library(maps)
library(shiny)
stateNameCSV = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
geodata <- read.csv("data/plantgeodata.csv")
write.csv(combined_plant_geo_data, file = "data/combined-plant-geo-data.csv")
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType == combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
View(combined_plant_geo_data)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
write.csv(combined_plant_geo_data, file = "data/combined-plant-geo-data.csv")
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
rm(geodata)
geodata <- read.csv("data/combined-plant-geo-data.csv")
? write.csv
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE, header = TRUE)
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE)
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE, stringsAsFactors = FALSE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
### convert generation data to vectors with charcters for manipulation
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE)
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/my-clean-power/shiny")
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/my-clean-power/shiny/my-clean-power-app")
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
runApp()
runApp()
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE, stringsAsFactors = FALSE) #read csv file
View(generationData)
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
rm(generationDataCleaned)
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE)
library("checkpoint", lib.loc="C:/Program Files/Microsoft/MRO-3.3.1/library")
checkCRAN()
checkpoint::checkpoint("2016-11-15")
shiny::runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
state = "Alabama"
stateCode <- statenames$State.Postal_Code[which(statenames$State == state)]		# using this to point to the state code
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/my-clean-power/shiny/my-clean-power-app")
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
stateCode <- statenames$State.Postal_Code[which(statenames$State == state)]		# using this to point to the state code
geodata[which(geodata$State==stateCode),]
runApp()
runApp()
runApp()
runApp()
install.packages('plotly')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? addLegend
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(geodata)
hist(geodata$Net.Gen)
? hist
hist(geodata$Net.Gen, breaks = seq(0:10000, by = 1000))
hist(geodata$Net.Gen, breaks = seq(0,10000, by = 1000))
hist(geodata$Net.Gen, breaks = seq(0,max(geodata$Net.Gen), by = 1000))
hist(geodata$Net.Gen[which(geodata$Net.Gen > 0)], breaks = seq(0,max(geodata$Net.Gen), by = 1000))
? hist
hist(geodata$Net.Gen[which(geodata$Net.Gen > 0)], breaks = 12)
hist(geodata$Net.Gen, breaks = 100)
hist(geodata$Net.Gen, breaks = 100,xlim = c(0,10000))
hist(geodata$Net.Gen, breaks = 100,xlim = c(0,100000))
hist(geodata$Net.Gen, breaks = 100,xlim = c(0,100000), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 1000,xlim = c(0,100000), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 1000,xlim = c(0,10000), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 10000, ylim = c(0, 10e3), xlim = c(0,10000), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 10000, ylim = c(0, 5e3), xlim = c(0,10000), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 10000, ylim = c(0, 3e3), xlim = c(0,10e3), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 10000, ylim = c(0, 3e3), xlim = c(0,5e3), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 5e3, ylim = c(0, 3e3), xlim = c(0,5e3), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 10e3, ylim = c(0, 3e3), xlim = c(0,5e3), col = "#ff8255")
hist(geodata$Net.Gen, breaks = 12455, ylim = c(0, 3e3), xlim = c(0,5e3), col = "#ff8255")
barplot(geodata$Net.Gen)
boxplot(geodata$Net.Gen)
? boxplot
boxplot(geodata$Net.Gen, ylim = c(0, 5e3), col = "ff8255")
boxplot(geodata$Net.Gen, ylim = c(0, 5e3), col = "#ff8255")
boxplot(geodata$Net.Gen, ylim = c(0, 10e3), col = "#ff8255")
boxplot(geodata$Net.Gen, ylim = c(0, 4e3), col = "#ff8255")
boxplot(geodata$Net.Gen, ylim = c(0, 1e3), col = "#ff8255")
boxplot(geodata$Net.Gen, ylim = c(0, 0.5e3), col = "#ff8255")
runApp()
geodata[which(geodata$State=="AL"),][which(geodata$Net.Gen > 100)]
geodata[which(geodata$State=="AL"),][which(geodata$Net.Gen > 100),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? match
runApp()
geodata[("BIT" %in% geodata$FuelType),][which(geodata$Net.Gen > 100),]
geodata[("BIT" %in% geodata$FuelType) & (which(geodata$Net.Gen > 100)),]
geodata[(match("BIT",geodata$FuelType)) & (which(geodata$Net.Gen > 100)),]
geodata[(grepl("BIT",geodata$FuelType)) & (which(geodata$Net.Gen > 100)),]
library(dplyr)
filter_(geodata$FuelType, Net.Gen > 100)
filter_(geodata, Net.Gen > 100)
? filter_
filter(geodata, Net.Gen > 100)
filter(geodata, Net.Gen > 100)$FuelType
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
format(1e3, "0,000")
? format
format(1:10)
format(2^31-1)
format(2^31-1, scientific = TRUE)
format(13.7, nsmall = 3)
format(2^31-1, scientific = TRUE, digits = 2)
runApp()
(894506, scientific = TRUE, digits = 2)
format(894506, scientific = TRUE, digits = 2)
runApp()
runApp()
format(14150397, scientific = TRUE, digits = 2)
format(filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen, scientific = TRUE, digits = 2)
typeof(filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen)
format((filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen), scientific = TRUE, digits = 2)
typeof(format(filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen, scientific = TRUE, digits = 2))
filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen
a_exp <- filter(geodata, Net.Gen > 100, FuelType %in% "WAT")$Net.Gen
format(a_exp, scientific = TRUE, digits = 2)
format(as.integer(a_exp), scientific = TRUE, digits = 2)
filter(geodata, Net.Gen > 100, FuelType %in% c("WAT"))
filter(geodata, Net.Gen > 100, FuelType %in% c("WAT"))$Net.Gen
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
packrat::set_opts(vcs.ignore.lib = TRUE, vcs.ignore.src = FALSE)
checkpoint::checkpoint("2016-11-15")
shiny::runApp('shiny/my-clean-power-app')
? colorFactor
? palette
? %in%
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
