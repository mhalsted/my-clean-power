install.packages("tibble")
library(tibble)
install.packages("readr")
install.packages("readr")
read.csv("data/raw-2015-plant-data.csv", stringsAsFactors = FALSE, skip = 5)
raw-plant-data <- read.csv("data/raw-2015-plant-data.csv", stringsAsFactors = FALSE, skip = 5)
raw_plant_data <- read.csv("data/raw-2015-plant-data.csv", stringsAsFactors = FALSE, skip = 5)
plant_data_cleaned <- c(raw_plant_data$Plant.Id,raw_plant_data$Plant.Name,raw_plant_data$Plant.State,
raw_plant_data$Net.Generation..Megawatthours., raw_plant_data$Physical.Unit.Label,
raw_plant_data$Total.Fuel.Consumption.Quantity)
plant_data_cleaned <- cbind(raw_plant_data$Plant.Id,raw_plant_data$Plant.Name,raw_plant_data$Plant.State,
raw_plant_data$Net.Generation..Megawatthours., raw_plant_data$Physical.Unit.Label,
raw_plant_data$Total.Fuel.Consumption.Quantity)
plant_data_cleaned <- rbind(raw_plant_data$Plant.Id,raw_plant_data$Plant.Name,raw_plant_data$Plant.State,
raw_plant_data$Net.Generation..Megawatthours., raw_plant_data$Physical.Unit.Label,
raw_plant_data$Total.Fuel.Consumption.Quantity)
View(plant_data_cleaned)
library(tibble)
plant_data_cleaned <- data_frame(
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
Plant.State = raw_plant_data$Plant.State,
Net.Gen = raw_plant_data$Net.Generation..Megawatthours.,
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
View(plant_data_cleaned)
plant_data_cleaned$Net.Gen(which(plant_data_cleaned$Plant.State=="TN"))
plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")]
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")])
plant_data_cleaned <- data_frame(
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
Plant.State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(raw_plant_data$Net.Generation..Megawatthours.),
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
plant_data_cleaned <- data_frame(
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
Plant.State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(gsub(",", "", raw_plant_data$Net.Generation..Megawatthours.)),
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$Plant.State=="TN")])
raw_plant_geo_data <- read.csv("data/plantgeodata.csv", stringsAsFactors = FALSE)
plant_data_cleaned <- data_frame( #renamed variable =  #named variable from spreadsheet
Plant.Id = raw_plant_data$Plant.Id,
Plant.Name = raw_plant_data$Plant.Name,
State = raw_plant_data$Plant.State,
Net.Gen = as.numeric(gsub(",", "", raw_plant_data$Net.Generation..Megawatthours.)), #fix commas in numerical data issue http://stackoverflow.com/a/1523177
Physical_Unit = raw_plant_data$Physical.Unit.Label,
Total_Fuel_Consumption = raw_plant_data$Total.Fuel.Consumption.Quantity)
## Examples:
sum(plant_data_cleaned$Net.Gen[which(plant_data_cleaned$State=="TN")]) #sum of net gen from all plants in TN
plant_geo_data_cleaned <- data_frame(
Plant.Id = raw_plant_geo_data$ORIS.Code,
Plant.Name = raw_plant_geo_data$Name,
FuelType = raw_plant_geo_data$Fuel,
FuelType.Simplified = raw_plant_geo_data$FuelSimplified,
State = raw_plant_geo_data$State,
Lat = raw_plant_geo_data$Lat,
Lon = raw_plant_geo_data$Lon
)
View(plant_data_cleaned)
combined_plant_geo_data <- data_frame(
Plant.Id = plant_data_cleaned$Plant.Id,
Plant.Name = plant_data_cleaned$Plant.Name,
State = plant_data_cleaned$State,
Net.Gen = plant_data_cleaned$Net.Gen, #fix commas in numerical data issue http://stackoverflow.com/a/1523177
Physical_Unit = plant_data_cleaned$Physical_Unit,
Total_Fuel_Consumption = plant_data_cleaned$Total_Fuel_Consumption,
FuelType = NA,
Lat = NA,
Lon = NA
)
combined_plant_geo_data$Lat <- plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id = combined_plant_geo_data$Plant.Id)]
combined_plant_geo_data$Lat <- plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id)]
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id[i] == combined_plant_geo_data$Plant.Id[i])]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
View(combined_plant_geo_data)
View(plant_geo_data_cleaned)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
print(i)
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
print(paste(i, length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])])))
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
print(paste(i, length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])])))
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
}
warnings()
View(combined_plant_geo_data)
summary(plant_geo_data_cleaned$Plant.Id)
which(1:4 > 5)
which(1:4 > 2)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])]
}
}
factor(plant_geo_data_cleaned$Plant.Id)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1)
{
combined_plant_geo_data$Lat[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
}
}
which(plant_geo_data_cleaned$Plant.Id == 2727)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA, # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1],
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
? NA
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if(length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = '', # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = ''
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1],
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
combined_plant_geo_data$Lon <- as.numeric(combined_plant_geo_data$Lon)
library(checkpoint)
checkpoint::checkpoint("2016-11-15")
install.packages("shiny")
shiny::runApp('shiny/my-clean-power-app')
install.packages("leaflet")
install.packages("maps")
library(maps)
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
stateNameCSV = read.csv("data/StateNames.csv",
header = TRUE)
### convert generation data to vectors with charcters for manipulation
statenames = as.character(stateNameCSV$State)
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
### Plant Location Data
geodata <- read.csv("data/plantgeodata.csv")
runApp('shiny/my-clean-power-app')
library(leaflet)
library(maps)
library(shiny)
stateNameCSV = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
geodata <- read.csv("data/plantgeodata.csv")
write.csv(combined_plant_geo_data, file = "data/combined-plant-geo-data.csv")
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType = combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$FuelType == combined_plant_geo_data$FuelType[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
View(combined_plant_geo_data)
for (i in 1:length(combined_plant_geo_data$Plant.Id)) # we can't do this in one line with the above method because we need to do replacements for each unique plant ID. for loop from 1 to the number of plants listed (note that in plant_data_cleaned some plants are listed more than 1 because of different generator sources.)
{
if (length(which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])) < 1) # account for new plants since the geo data was collected (in this case 2012)
{
combined_plant_geo_data$Lat[i] = NA # we don't have the lat lon, so just keep it NA
combined_plant_geo_data$Lon[i] = NA #in if statements, you don't include comma separation...
combined_plant_geo_data$FuelType[i] = NA
}
else{
combined_plant_geo_data$Lat[i] = plant_geo_data_cleaned$Lat[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
combined_plant_geo_data$Lon[i] = as.numeric(plant_geo_data_cleaned$Lon[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1])
combined_plant_geo_data$FuelType[i] = plant_geo_data_cleaned$FuelType[which(plant_geo_data_cleaned$Plant.Id == combined_plant_geo_data$Plant.Id[i])][1]
} # assign the lat value to the combined table based on the lat info from the geo data where the plant id matches. it seems that there are a few plants in geo data with multiple lat/lon per plant ID, so let's just return the 1st one for now... [need to fix that issue]
}
write.csv(combined_plant_geo_data, file = "data/combined-plant-geo-data.csv")
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
rm(geodata)
geodata <- read.csv("data/combined-plant-geo-data.csv")
? write.csv
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE, header = TRUE)
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE)
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
generationData = read.csv("data/statedata.csv", #"https://docs.google.com/spreadsheets/d/1ZbDI31sSKatBoEVKo70TV_A4VwCBHK4pIoCWXB7yfx0/pub?gid=192701245&single=true&output=csv",
header = TRUE, stringsAsFactors = FALSE) #read csv file
generationDataCleaned = generationData[!(is.null(generationData$Name) | generationData$Name==""), ]
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
### convert generation data to vectors with charcters for manipulation
row.names(generationDataCleaned) = as.character(generationDataCleaned$Name)
geodata <- read.csv("data/combined-plant-geo-data.csv", stringsAsFactors = FALSE)
runApp('shiny/my-clean-power-app')
runApp('shiny/my-clean-power-app')
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/my-clean-power/shiny")
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/my-clean-power/shiny/my-clean-power-app")
statenames = read.csv("data/StateNames.csv",
header = TRUE, stringsAsFactors = FALSE)
runApp()
runApp()
